pub fn pairwise_swap(n: u32) -> u32 {
    let even_mask: u32 = 0xAAAAAAAA;
    let odd_mask: u32 = 0x55555555;

    ((n & even_mask) >> 1) | ((n & odd_mask) << 1)
}
/*
時間計算量: O(1)

マスクとビット演算、シフト演算はすべて定数回の操作だからです。

空間計算量: O(1)

補助変数は定数個のみ使用しています。
*/

/*
let even_mask: u32 = 0xAAAAAAAA;：

16進数リテラル 0xAAAAAAAA はビットパターン 1010 1010 … 1010。

これにより位置0,2,4,…（LSB を位置0 とした偶数番目）のビットだけが 1、他は 0 になります。
*/

/*
let odd_mask: u32 = 0x55555555;：

16進数リテラル 0x55555555 はビットパターン 0101 0101 … 0101。

位置1,3,5,…（奇数番目）のビットだけが 1、他は 0 になります。

rust
コードをコピーする

*/